import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.bot import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATE = os.getenv("DATE", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
TIME = os.getenv("TIME", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
PLACE = os.getenv("PLACE", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
PLAYERS_COUNT = os.getenv("PLAYERS_COUNT", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
PRICE = os.getenv("PRICE", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
EVENT_TEXT = os.getenv("EVENT_TEXT", "–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='Markdown'))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∑—Ä–∏—Ç–µ–ª–µ–π
players = []
spectators = []
registration_open = True  # –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="join")],
        [InlineKeyboardButton(text="üëÄ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∑—Ä–∏—Ç–µ–ª–µ–º", callback_data="spectate")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="leave")]
    ] if registration_open else [[InlineKeyboardButton(text="üö´ –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞", callback_data="disabled")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def generate_list():
    text = (
        f"üìÖ **–î–∞—Ç–∞:** {DATE}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {TIME}\n"
        f"üìç **–ú–µ—Å—Ç–æ:** {PLACE}\n"
        f"üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:** {PLAYERS_COUNT}\n"
        f"üíµ **–¶–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è:** {PRICE}\n\n"
        f"{EVENT_TEXT}\n\n"
    )

    if players:
        text += "**üé≠ –ò–≥—Ä–æ–∫–∏:**\n" + "\n".join(f"{i+1}. {name}" for i, name in enumerate(players)) + "\n\n"
    else:
        text += "**üé≠ –ò–≥—Ä–æ–∫–∏:**\n‚õî –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.\n\n"

    if spectators:
        text += "**üëÄ –ó—Ä–∏—Ç–µ–ª–∏:**\n" + "\n".join(f"{i+1}. {name}" for i, name in enumerate(spectators)) + "\n"
    else:
        text += "**üëÄ –ó—Ä–∏—Ç–µ–ª–∏:**\n‚õî –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.\n"

    return text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–ø–∏—Å—å
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    global registration_open
    if message.chat.id != CHAT_ID:
        return
    registration_open = True
    await bot.send_message(CHAT_ID, "‚úÖ –ó–∞–ø–∏—Å—å **–æ—Ç–∫—Ä—ã—Ç–∞**!", reply_markup=get_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop ‚Äì –æ—Ç–∫–ª—é—á–∞–µ—Ç –∑–∞–ø–∏—Å—å, –Ω–æ —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
@dp.message(Command("stop"))
async def stop_handler(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    global registration_open
    registration_open = False
    await bot.send_message(CHAT_ID, "üö´ **–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞!**", reply_markup=get_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
@dp.message(Command("list"))
async def list_handler(message: types.Message):
    await message.answer(generate_list())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@dp.callback_query(F.data == "join")
async def join_game(callback: types.CallbackQuery):
    if not registration_open:
        await callback.answer("üö´ –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞!", show_alert=True)
        return

    user_name = callback.from_user.full_name
    if user_name not in players:
        players.append(user_name)
        if user_name in spectators:
            spectators.remove(user_name)
        await bot.send_message(CHAT_ID, generate_list(), reply_markup=get_keyboard())

    await callback.answer("‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –∏–≥—Ä–æ–∫!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∑—Ä–∏—Ç–µ–ª–µ–º"
@dp.callback_query(F.data == "spectate")
async def spectate_game(callback: types.CallbackQuery):
    if not registration_open:
        await callback.answer("üö´ –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞!", show_alert=True)
        return

    user_name = callback.from_user.full_name
    if user_name not in spectators:
        spectators.append(user_name)
        if user_name in players:
            players.remove(user_name)
        await bot.send_message(CHAT_ID, generate_list(), reply_markup=get_keyboard())

    await callback.answer("üëÄ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –∑—Ä–∏—Ç–µ–ª—å!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"
@dp.callback_query(F.data == "leave")
async def leave_game(callback: types.CallbackQuery):
    logging.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω callback: {callback.data} –æ—Ç {callback.from_user.full_name}")

    user_name = callback.from_user.full_name
    if user_name in players:
        players.remove(user_name)
    if user_name in spectators:
        spectators.remove(user_name)

    await bot.send_message(CHAT_ID, generate_list(), reply_markup=get_keyboard())
    await callback.answer("üö´ –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
@dp.callback_query()
async def debug_callback(callback: types.CallbackQuery):
    logging.info(f"‚ö†Ô∏è –ë–æ—Ç –ø–æ–ª—É—á–∏–ª callback: {callback.data}")
    await callback.answer("üîç Callback –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message(Command("reset"))
async def reset_handler(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    players.clear()
    spectators.clear()
    await bot.send_message(CHAT_ID, "üóë –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω!", reply_markup=get_keyboard())

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
